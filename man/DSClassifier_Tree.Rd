% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DSClassifier_Tree.R
\name{DSClassifier_Tree}
\alias{DSClassifier_Tree}
\alias{update.DSClassifier_Tree}
\alias{predict.DSClassifier_Tree}
\title{DSClassifier_Tree -- Tree-based Classifier Using a Sliding Window}
\usage{
DSClassifier_Tree(formula, window, rebuild, ...)

\method{update}{DSClassifier_Tree}(object, dsd, n = 1L, rebuild = FALSE, ...)

\method{predict}{DSClassifier_Tree}(object, newdata, type = "vector", ...)
}
\arguments{
\item{formula}{a formula for the classification problem.}

\item{window}{size of the sliding window.}

\item{rebuild}{logical; fore a rebuild after the update.}

\item{...}{further arguments are currently unused.}

\item{object}{the updated \code{DSClassifier} object.}

\item{dsd}{A \link{DSD} object with the data stream.}

\item{n}{number of points from \code{dsd} to use for the update.}

\item{newdata}{dataframe with the new data.}

\item{type}{prediction type (see \code{predict.rpart()}).}
}
\value{
An object of class \code{DSClassifier_Tree}
}
\description{
The classifier keeps a sliding window for the stream and rebuilds rpart models at regular
intervals.
}
\examples{
library(stream)

# create a data stream for the iris dataset
data <- iris[sample(nrow(iris)), ]
stream <- DSD_Memory(data)
stream

# define the stream classifier.
cl <- DSClassifier_Tree(
  Species ~ Sepal.Length + Sepal.Width + Petal.Length,
  window = 50,
  rebuild = 10
  )

cl

# update the classifier with 100 points from the stream
update(cl, stream, 100)

# predict the class for the next 50 points
newdata <- get_points(stream, n = 50)
pr <- predict(cl, newdata)
pr

table(pr, newdata$Species)

# get the tree model
cl$model$tree
}
\seealso{
Other DSClassifier: 
\code{\link{DSClassifier}()}
}
\author{
Michael Hahsler
}
\concept{DSClassifier}
